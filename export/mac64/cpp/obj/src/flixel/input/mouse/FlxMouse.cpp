// Generated by Haxe 3.4.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse__FlxMouse_GraphicCursor
#include <flixel/input/mouse/_FlxMouse/GraphicCursor.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_replay_MouseRecord
#include <flixel/system/replay/MouseRecord.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Bitmap
#include <openfl/_legacy/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BitmapData
#include <openfl/_legacy/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_MovieClip
#include <openfl/_legacy/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_PixelSnapping
#include <openfl/_legacy/display/PixelSnapping.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Stage
#include <openfl/_legacy/display/Stage.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_Event
#include <openfl/_legacy/events/Event.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_MouseEvent
#include <openfl/_legacy/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl__legacy_ui_Mouse
#include <openfl/_legacy/ui/Mouse.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_34_new,"flixel.input.mouse.FlxMouse","new",0x1251bd04,"flixel.input.mouse.FlxMouse.new","flixel/input/mouse/FlxMouse.hx",34,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_161_load,"flixel.input.mouse.FlxMouse","load",0xf3e8bd02,"flixel.input.mouse.FlxMouse.load","flixel/input/mouse/FlxMouse.hx",161,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_233_unload,"flixel.input.mouse.FlxMouse","unload",0x5a7132db,"flixel.input.mouse.FlxMouse.unload","flixel/input/mouse/FlxMouse.hx",233,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_320_destroy,"flixel.input.mouse.FlxMouse","destroy",0x77a13b9e,"flixel.input.mouse.FlxMouse.destroy","flixel/input/mouse/FlxMouse.hx",320,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_359_reset,"flixel.input.mouse.FlxMouse","reset",0xe595a773,"flixel.input.mouse.FlxMouse.reset","flixel/input/mouse/FlxMouse.hx",359,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_408_update,"flixel.input.mouse.FlxMouse","update",0x7bea17e5,"flixel.input.mouse.FlxMouse.update","flixel/input/mouse/FlxMouse.hx",408,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_439_onFocus,"flixel.input.mouse.FlxMouse","onFocus",0xede20cdd,"flixel.input.mouse.FlxMouse.onFocus","flixel/input/mouse/FlxMouse.hx",439,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_453_onFocusLost,"flixel.input.mouse.FlxMouse","onFocusLost",0xc7f71561,"flixel.input.mouse.FlxMouse.onFocusLost","flixel/input/mouse/FlxMouse.hx",453,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_470_onGameStart,"flixel.input.mouse.FlxMouse","onGameStart",0x61da7695,"flixel.input.mouse.FlxMouse.onGameStart","flixel/input/mouse/FlxMouse.hx",470,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_478_onMouseWheel,"flixel.input.mouse.FlxMouse","onMouseWheel",0xdc642911,"flixel.input.mouse.FlxMouse.onMouseWheel","flixel/input/mouse/FlxMouse.hx",478,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_491_onMouseLeave,"flixel.input.mouse.FlxMouse","onMouseLeave",0x84fd296d,"flixel.input.mouse.FlxMouse.onMouseLeave","flixel/input/mouse/FlxMouse.hx",491,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_497_get_pressed,"flixel.input.mouse.FlxMouse","get_pressed",0x4652635d,"flixel.input.mouse.FlxMouse.get_pressed","flixel/input/mouse/FlxMouse.hx",497,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_498_get_justPressed,"flixel.input.mouse.FlxMouse","get_justPressed",0x70091811,"flixel.input.mouse.FlxMouse.get_justPressed","flixel/input/mouse/FlxMouse.hx",498,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_499_get_justReleased,"flixel.input.mouse.FlxMouse","get_justReleased",0x9ec2046e,"flixel.input.mouse.FlxMouse.get_justReleased","flixel/input/mouse/FlxMouse.hx",499,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_502_get_pressedRight,"flixel.input.mouse.FlxMouse","get_pressedRight",0x90e8c73f,"flixel.input.mouse.FlxMouse.get_pressedRight","flixel/input/mouse/FlxMouse.hx",502,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_503_get_justPressedRight,"flixel.input.mouse.FlxMouse","get_justPressedRight",0xa8a2860b,"flixel.input.mouse.FlxMouse.get_justPressedRight","flixel/input/mouse/FlxMouse.hx",503,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_504_get_justReleasedRight,"flixel.input.mouse.FlxMouse","get_justReleasedRight",0x8742a88e,"flixel.input.mouse.FlxMouse.get_justReleasedRight","flixel/input/mouse/FlxMouse.hx",504,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_506_get_pressedMiddle,"flixel.input.mouse.FlxMouse","get_pressedMiddle",0x38fe0e92,"flixel.input.mouse.FlxMouse.get_pressedMiddle","flixel/input/mouse/FlxMouse.hx",506,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_507_get_justPressedMiddle,"flixel.input.mouse.FlxMouse","get_justPressedMiddle",0xe3cb4246,"flixel.input.mouse.FlxMouse.get_justPressedMiddle","flixel/input/mouse/FlxMouse.hx",507,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_508_get_justReleasedMiddle,"flixel.input.mouse.FlxMouse","get_justReleasedMiddle",0xd1495263,"flixel.input.mouse.FlxMouse.get_justReleasedMiddle","flixel/input/mouse/FlxMouse.hx",508,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_512_showSystemCursor,"flixel.input.mouse.FlxMouse","showSystemCursor",0xf4551c9e,"flixel.input.mouse.FlxMouse.showSystemCursor","flixel/input/mouse/FlxMouse.hx",512,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_523_hideSystemCursor,"flixel.input.mouse.FlxMouse","hideSystemCursor",0xb5438fe3,"flixel.input.mouse.FlxMouse.hideSystemCursor","flixel/input/mouse/FlxMouse.hx",523,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_540_set_useSystemCursor,"flixel.input.mouse.FlxMouse","set_useSystemCursor",0x074e74d3,"flixel.input.mouse.FlxMouse.set_useSystemCursor","flixel/input/mouse/FlxMouse.hx",540,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_554_showCursor,"flixel.input.mouse.FlxMouse","showCursor",0xa585e38f,"flixel.input.mouse.FlxMouse.showCursor","flixel/input/mouse/FlxMouse.hx",554,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_573_hideCursor,"flixel.input.mouse.FlxMouse","hideCursor",0xd396e514,"flixel.input.mouse.FlxMouse.hideCursor","flixel/input/mouse/FlxMouse.hx",573,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_579_set_visible,"flixel.input.mouse.FlxMouse","set_visible",0xb9fd1039,"flixel.input.mouse.FlxMouse.set_visible","flixel/input/mouse/FlxMouse.hx",579,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_590_record,"flixel.input.mouse.FlxMouse","record",0xf2d1086d,"flixel.input.mouse.FlxMouse.record","flixel/input/mouse/FlxMouse.hx",590,0xe4e80b89)
HX_LOCAL_STACK_FRAME(_hx_pos_dcc29ee8d0f87524_606_playback,"flixel.input.mouse.FlxMouse","playback",0xaadcd2f7,"flixel.input.mouse.FlxMouse.playback","flixel/input/mouse/FlxMouse.hx",606,0xe4e80b89)
namespace flixel{
namespace input{
namespace mouse{

void FlxMouse_obj::__construct( ::openfl::_legacy::display::Sprite CursorContainer){
            	HX_GC_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_34_new)
HXLINE( 134)		this->_lastWheel = (int)0;
HXLINE( 133)		this->_lastY = (int)0;
HXLINE( 132)		this->_lastX = (int)0;
HXLINE( 127)		this->_visibleWhenFocusLost = true;
HXLINE( 126)		this->_wheelUsed = false;
HXLINE( 124)		this->_cursor = null();
HXLINE(  60)		this->useSystemCursor = false;
HXLINE(  56)		this->visible = true;
HXLINE(  45)		this->wheel = (int)0;
HXLINE(  40)		this->enabled = true;
HXLINE( 374)		super::__construct();
HXLINE( 375)		this->cursorContainer = CursorContainer;
HXLINE( 376)		this->cursorContainer->set_mouseChildren(false);
HXLINE( 377)		this->cursorContainer->set_mouseEnabled(false);
HXLINE( 379)		this->_leftButton =  ::flixel::input::mouse::FlxMouseButton_obj::__alloc( HX_CTX ,(int)-1);
HXLINE( 381)		this->_stage = ::openfl::_legacy::Lib_obj::get_current()->get_stage();
HXLINE( 382)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN,this->_leftButton->onDown_dyn(),null(),null(),null());
HXLINE( 383)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,this->_leftButton->onUp_dyn(),null(),null(),null());
HXLINE( 386)		this->_middleButton =  ::flixel::input::mouse::FlxMouseButton_obj::__alloc( HX_CTX ,(int)-2);
HXLINE( 387)		this->_rightButton =  ::flixel::input::mouse::FlxMouseButton_obj::__alloc( HX_CTX ,(int)-3);
HXLINE( 389)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MIDDLE_MOUSE_DOWN,this->_middleButton->onDown_dyn(),null(),null(),null());
HXLINE( 390)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MIDDLE_MOUSE_UP,this->_middleButton->onUp_dyn(),null(),null(),null());
HXLINE( 391)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::RIGHT_MOUSE_DOWN,this->_rightButton->onDown_dyn(),null(),null(),null());
HXLINE( 392)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::RIGHT_MOUSE_UP,this->_rightButton->onUp_dyn(),null(),null(),null());
HXLINE( 394)		this->_stage->addEventListener(::openfl::_legacy::events::Event_obj::MOUSE_LEAVE,this->onMouseLeave_dyn(),null(),null(),null());
HXLINE( 397)		this->_stage->addEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_WHEEL,this->onMouseWheel_dyn(),null(),null(),null());
HXLINE( 399)		::flixel::FlxG_obj::signals->gameStarted->add(this->onGameStart_dyn());
HXLINE( 400)		::openfl::_legacy::ui::Mouse_obj::hide();
            	}

Dynamic FlxMouse_obj::__CreateEmpty() { return new FlxMouse_obj; }

void *FlxMouse_obj::_hx_vtable = 0;

Dynamic FlxMouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxMouse_obj > _hx_result = new FlxMouse_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxMouse_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0fe7efd5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0fe7efd5;
	} else {
		return inClassId==(int)0x1191d8aa;
	}
}

static ::flixel::input::IFlxInputManager_obj _hx_flixel_input_mouse_FlxMouse__hx_flixel_input_IFlxInputManager= {
	( void (hx::Object::*)())&::flixel::input::mouse::FlxMouse_obj::destroy,
	( void (hx::Object::*)())&::flixel::input::mouse::FlxMouse_obj::reset,
	( void (hx::Object::*)())&::flixel::input::mouse::FlxMouse_obj::update,
	( void (hx::Object::*)())&::flixel::input::mouse::FlxMouse_obj::onFocus,
	( void (hx::Object::*)())&::flixel::input::mouse::FlxMouse_obj::onFocusLost,
};

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_input_mouse_FlxMouse__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::input::mouse::FlxMouse_obj::destroy,
};

void *FlxMouse_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x65dd217a: return &_hx_flixel_input_mouse_FlxMouse__hx_flixel_input_IFlxInputManager;
		case (int)0xd4fe2fcd: return &_hx_flixel_input_mouse_FlxMouse__hx_flixel_util_IFlxDestroyable;
	}
	return super::_hx_getInterface(inHash);
}

void FlxMouse_obj::load( ::Dynamic Graphic,hx::Null< Float >  __o_Scale,hx::Null< int >  __o_XOffset,hx::Null< int >  __o_YOffset){
Float Scale = __o_Scale.Default(1);
int XOffset = __o_XOffset.Default(0);
int YOffset = __o_YOffset.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_161_load)
HXLINE( 163)		if (hx::IsNotNull( this->_cursor )) {
HXLINE( 165)			::flixel::util::FlxDestroyUtil_obj::removeChild(this->cursorContainer,this->_cursor);
            		}
HXLINE( 169)		if (hx::IsNull( Graphic )) {
HXLINE( 171)			Graphic =  ::flixel::input::mouse::_FlxMouse::GraphicCursor_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null());
            		}
HXLINE( 174)		if (::Std_obj::is(Graphic,hx::ClassOf< ::hx::Class >())) {
HXLINE( 176)			this->_cursor = ( ( ::openfl::_legacy::display::Bitmap)(::Type_obj::createInstance(Graphic,::cpp::VirtualArray_obj::__new(0))) );
            		}
            		else {
HXLINE( 178)			if (::Std_obj::is(Graphic,hx::ClassOf< ::openfl::_legacy::display::BitmapData >())) {
HXLINE( 180)				this->_cursor =  ::openfl::_legacy::display::Bitmap_obj::__alloc( HX_CTX ,( ( ::openfl::_legacy::display::BitmapData)(Graphic) ),null(),null());
            			}
            			else {
HXLINE( 182)				if (::Std_obj::is(Graphic,hx::ClassOf< ::String >())) {
HXLINE( 184)					::String id = ( (::String)(Graphic) );
HXDLIN( 184)					 ::openfl::_legacy::display::BitmapData _hx_tmp;
HXDLIN( 184)					if (::openfl::_legacy::Assets_obj::exists(id,null())) {
HXLINE( 184)						_hx_tmp = ::openfl::_legacy::Assets_obj::getBitmapData(id,false);
            					}
            					else {
HXLINE( 184)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN( 184)						_hx_tmp = null();
            					}
HXDLIN( 184)					this->_cursor =  ::openfl::_legacy::display::Bitmap_obj::__alloc( HX_CTX ,_hx_tmp,null(),null());
            				}
            				else {
HXLINE( 188)					this->_cursor =  ::openfl::_legacy::display::Bitmap_obj::__alloc( HX_CTX , ::flixel::input::mouse::_FlxMouse::GraphicCursor_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),null()),null(),null());
            				}
            			}
            		}
HXLINE( 191)		this->_cursor->set_x(XOffset);
HXLINE( 192)		this->_cursor->set_y(YOffset);
HXLINE( 193)		this->_cursor->set_scaleX(Scale);
HXLINE( 194)		this->_cursor->set_scaleY(Scale);
HXLINE( 223)		this->cursorContainer->addChild(this->_cursor);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxMouse_obj,load,(void))

void FlxMouse_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_233_unload)
HXDLIN( 233)		if (hx::IsNotNull( this->_cursor )) {
HXLINE( 235)			if (this->cursorContainer->get_visible()) {
HXLINE( 237)				this->load(null(),null(),null(),null());
            			}
            			else {
HXLINE( 241)				this->_cursor = ( ( ::openfl::_legacy::display::Bitmap)(::flixel::util::FlxDestroyUtil_obj::removeChild(this->cursorContainer,this->_cursor)) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,unload,(void))

void FlxMouse_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_320_destroy)
HXLINE( 321)		if (hx::IsNotNull( this->_stage )) {
HXLINE( 323)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_DOWN,this->_leftButton->onDown_dyn(),null());
HXLINE( 324)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,this->_leftButton->onUp_dyn(),null());
HXLINE( 327)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MIDDLE_MOUSE_DOWN,this->_middleButton->onDown_dyn(),null());
HXLINE( 328)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MIDDLE_MOUSE_UP,this->_middleButton->onUp_dyn(),null());
HXLINE( 329)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::RIGHT_MOUSE_DOWN,this->_rightButton->onDown_dyn(),null());
HXLINE( 330)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::RIGHT_MOUSE_UP,this->_rightButton->onUp_dyn(),null());
HXLINE( 332)			this->_stage->removeEventListener(::openfl::_legacy::events::Event_obj::MOUSE_LEAVE,this->onMouseLeave_dyn(),null());
HXLINE( 335)			this->_stage->removeEventListener(::openfl::_legacy::events::MouseEvent_obj::MOUSE_WHEEL,this->onMouseWheel_dyn(),null());
            		}
HXLINE( 338)		this->cursorContainer = null();
HXLINE( 339)		this->_cursor = null();
HXLINE( 345)		this->_leftButton = ( ( ::flixel::input::mouse::FlxMouseButton)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_leftButton)) );
HXLINE( 347)		this->_middleButton = ( ( ::flixel::input::mouse::FlxMouseButton)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_middleButton)) );
HXLINE( 348)		this->_rightButton = ( ( ::flixel::input::mouse::FlxMouseButton)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_rightButton)) );
HXLINE( 351)		this->_cursorBitmapData = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_cursorBitmapData);
HXLINE( 352)		::flixel::FlxG_obj::signals->gameStarted->remove(this->onGameStart_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,destroy,(void))

void FlxMouse_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_359_reset)
HXLINE( 360)		this->_leftButton->reset();
HXLINE( 363)		this->_middleButton->reset();
HXLINE( 364)		this->_rightButton->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,reset,(void))

void FlxMouse_obj::update(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_408_update)
HXLINE( 410)		{
HXLINE( 410)			Float newX = ::flixel::FlxG_obj::game->get_mouseX();
HXDLIN( 410)			Float newY = ::flixel::FlxG_obj::game->get_mouseY();
HXDLIN( 410)			this->_globalScreenX = ::Std_obj::_hx_int(((Float)newX / (Float)::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 410)			this->_globalScreenY = ::Std_obj::_hx_int(((Float)newY / (Float)::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 410)			this->updatePositions();
            		}
HXLINE( 413)		if (this->visible) {
HXLINE( 415)			 ::openfl::_legacy::display::Sprite _hx_tmp = this->cursorContainer;
HXDLIN( 415)			_hx_tmp->set_x(::flixel::FlxG_obj::game->get_mouseX());
HXLINE( 416)			 ::openfl::_legacy::display::Sprite _hx_tmp1 = this->cursorContainer;
HXDLIN( 416)			_hx_tmp1->set_y(::flixel::FlxG_obj::game->get_mouseY());
            		}
HXLINE( 421)		this->_leftButton->update();
HXLINE( 423)		this->_middleButton->update();
HXLINE( 424)		this->_rightButton->update();
HXLINE( 428)		if (!(this->_wheelUsed)) {
HXLINE( 430)			this->wheel = (int)0;
            		}
HXLINE( 432)		this->_wheelUsed = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,update,(void))

void FlxMouse_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_439_onFocus)
HXLINE( 440)		this->reset();
HXLINE( 443)		this->set_useSystemCursor(this->useSystemCursor);
HXLINE( 445)		this->set_visible(this->_visibleWhenFocusLost);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,onFocus,(void))

void FlxMouse_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_453_onFocusLost)
HXLINE( 455)		this->_visibleWhenFocusLost = this->visible;
HXLINE( 457)		if (this->visible) {
HXLINE( 459)			this->set_visible(false);
            		}
HXLINE( 462)		::openfl::_legacy::ui::Mouse_obj::show();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,onFocusLost,(void))

void FlxMouse_obj::onGameStart(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_470_onGameStart)
HXDLIN( 470)		this->set_visible(this->visible);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,onGameStart,(void))

void FlxMouse_obj::onMouseWheel( ::openfl::_legacy::events::MouseEvent FlashEvent){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_478_onMouseWheel)
HXDLIN( 478)		if (this->enabled) {
HXLINE( 480)			this->_wheelUsed = true;
HXLINE( 481)			this->wheel = FlashEvent->delta;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouse_obj,onMouseWheel,(void))

void FlxMouse_obj::onMouseLeave( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_491_onMouseLeave)
HXLINE( 492)		this->_rightButton->onUp(null());
HXLINE( 493)		this->_middleButton->onUp(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouse_obj,onMouseLeave,(void))

bool FlxMouse_obj::get_pressed(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_497_get_pressed)
HXDLIN( 497)		 ::flixel::input::mouse::FlxMouseButton _this = this->_leftButton;
HXDLIN( 497)		if ((_this->current != (int)1)) {
HXDLIN( 497)			return (_this->current == (int)2);
            		}
            		else {
HXDLIN( 497)			return true;
            		}
HXDLIN( 497)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_pressed,return )

bool FlxMouse_obj::get_justPressed(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_498_get_justPressed)
HXDLIN( 498)		return (this->_leftButton->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_justPressed,return )

bool FlxMouse_obj::get_justReleased(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_499_get_justReleased)
HXDLIN( 499)		return (this->_leftButton->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_justReleased,return )

bool FlxMouse_obj::get_pressedRight(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_502_get_pressedRight)
HXDLIN( 502)		 ::flixel::input::mouse::FlxMouseButton _this = this->_rightButton;
HXDLIN( 502)		if ((_this->current != (int)1)) {
HXDLIN( 502)			return (_this->current == (int)2);
            		}
            		else {
HXDLIN( 502)			return true;
            		}
HXDLIN( 502)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_pressedRight,return )

bool FlxMouse_obj::get_justPressedRight(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_503_get_justPressedRight)
HXDLIN( 503)		return (this->_rightButton->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_justPressedRight,return )

bool FlxMouse_obj::get_justReleasedRight(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_504_get_justReleasedRight)
HXDLIN( 504)		return (this->_rightButton->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_justReleasedRight,return )

bool FlxMouse_obj::get_pressedMiddle(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_506_get_pressedMiddle)
HXDLIN( 506)		 ::flixel::input::mouse::FlxMouseButton _this = this->_middleButton;
HXDLIN( 506)		if ((_this->current != (int)1)) {
HXDLIN( 506)			return (_this->current == (int)2);
            		}
            		else {
HXDLIN( 506)			return true;
            		}
HXDLIN( 506)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_pressedMiddle,return )

bool FlxMouse_obj::get_justPressedMiddle(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_507_get_justPressedMiddle)
HXDLIN( 507)		return (this->_middleButton->current == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_justPressedMiddle,return )

bool FlxMouse_obj::get_justReleasedMiddle(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_508_get_justReleasedMiddle)
HXDLIN( 508)		return (this->_middleButton->current == (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,get_justReleasedMiddle,return )

void FlxMouse_obj::showSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_512_showSystemCursor)
HXLINE( 516)		this->cursorContainer->set_visible(false);
HXLINE( 519)		::openfl::_legacy::ui::Mouse_obj::show();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,showSystemCursor,(void))

void FlxMouse_obj::hideSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_523_hideSystemCursor)
HXLINE( 530)		::openfl::_legacy::ui::Mouse_obj::hide();
HXLINE( 532)		if (this->visible) {
HXLINE( 534)			this->cursorContainer->set_visible(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,hideSystemCursor,(void))

bool FlxMouse_obj::set_useSystemCursor(bool Value){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_540_set_useSystemCursor)
HXLINE( 541)		if (Value) {
HXLINE( 543)			this->showSystemCursor();
            		}
            		else {
HXLINE( 547)			this->hideSystemCursor();
            		}
HXLINE( 549)		return (this->useSystemCursor = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouse_obj,set_useSystemCursor,return )

void FlxMouse_obj::showCursor(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_554_showCursor)
HXDLIN( 554)		if (this->useSystemCursor) {
HXLINE( 556)			::openfl::_legacy::ui::Mouse_obj::show();
            		}
            		else {
HXLINE( 560)			if (hx::IsNull( this->_cursor )) {
HXLINE( 561)				this->load(null(),null(),null(),null());
            			}
HXLINE( 566)			this->cursorContainer->set_visible(true);
HXLINE( 567)			::openfl::_legacy::ui::Mouse_obj::hide();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,showCursor,(void))

void FlxMouse_obj::hideCursor(){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_573_hideCursor)
HXLINE( 574)		this->cursorContainer->set_visible(false);
HXLINE( 575)		::openfl::_legacy::ui::Mouse_obj::hide();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,hideCursor,(void))

bool FlxMouse_obj::set_visible(bool Value){
            	HX_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_579_set_visible)
HXLINE( 580)		if (Value) {
HXLINE( 581)			this->showCursor();
            		}
            		else {
HXLINE( 583)			this->hideCursor();
            		}
HXLINE( 585)		return (this->visible = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouse_obj,set_visible,return )

 ::flixel::_hx_system::replay::MouseRecord FlxMouse_obj::record(){
            	HX_GC_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_590_record)
HXLINE( 591)		bool _hx_tmp;
HXDLIN( 591)		bool _hx_tmp1;
HXDLIN( 591)		bool _hx_tmp2;
HXDLIN( 591)		if ((this->_lastX == this->_globalScreenX)) {
HXLINE( 591)			_hx_tmp2 = (this->_lastY == this->_globalScreenY);
            		}
            		else {
HXLINE( 591)			_hx_tmp2 = false;
            		}
HXDLIN( 591)		if (_hx_tmp2) {
HXLINE( 591)			_hx_tmp1 = (this->_lastLeftButtonState == this->_leftButton->current);
            		}
            		else {
HXLINE( 591)			_hx_tmp1 = false;
            		}
HXDLIN( 591)		if (_hx_tmp1) {
HXLINE( 591)			_hx_tmp = (this->_lastWheel == this->wheel);
            		}
            		else {
HXLINE( 591)			_hx_tmp = false;
            		}
HXDLIN( 591)		if (_hx_tmp) {
HXLINE( 594)			return null();
            		}
HXLINE( 597)		this->_lastX = this->_globalScreenX;
HXLINE( 598)		this->_lastY = this->_globalScreenY;
HXLINE( 599)		this->_lastLeftButtonState = this->_leftButton->current;
HXLINE( 600)		this->_lastWheel = this->wheel;
HXLINE( 601)		return  ::flixel::_hx_system::replay::MouseRecord_obj::__alloc( HX_CTX ,this->_lastX,this->_lastY,this->_leftButton->current,this->_lastWheel);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMouse_obj,record,return )

void FlxMouse_obj::playback( ::flixel::_hx_system::replay::MouseRecord Record){
            	HX_GC_STACKFRAME(&_hx_pos_dcc29ee8d0f87524_606_playback)
HXLINE( 610)		bool _hx_tmp;
HXDLIN( 610)		bool _hx_tmp1;
HXDLIN( 610)		if ((this->_lastLeftButtonState != (int)1)) {
HXLINE( 610)			_hx_tmp1 = (this->_lastLeftButtonState == (int)2);
            		}
            		else {
HXLINE( 610)			_hx_tmp1 = true;
            		}
HXDLIN( 610)		if (_hx_tmp1) {
HXLINE( 611)			if ((Record->button != (int)0)) {
HXLINE( 610)				_hx_tmp = (Record->button == (int)-1);
            			}
            			else {
HXLINE( 610)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 610)			_hx_tmp = false;
            		}
HXDLIN( 610)		if (_hx_tmp) {
HXLINE( 613)			 ::openfl::_legacy::display::Stage _hx_tmp2 = this->_stage;
HXDLIN( 613)			_hx_tmp2->dispatchEvent( ::openfl::_legacy::events::MouseEvent_obj::__alloc( HX_CTX ,::openfl::_legacy::events::MouseEvent_obj::MOUSE_UP,true,false,Record->x,Record->y,null(),null(),null(),null(),null(),null(),null(),null()));
            		}
HXLINE( 615)		this->_lastLeftButtonState = (this->_leftButton->current = Record->button);
HXLINE( 616)		this->wheel = Record->wheel;
HXLINE( 617)		this->_globalScreenX = Record->x;
HXLINE( 618)		this->_globalScreenY = Record->y;
HXLINE( 619)		this->updatePositions();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMouse_obj,playback,(void))


hx::ObjectPtr< FlxMouse_obj > FlxMouse_obj::__new( ::openfl::_legacy::display::Sprite CursorContainer) {
	hx::ObjectPtr< FlxMouse_obj > __this = new FlxMouse_obj();
	__this->__construct(CursorContainer);
	return __this;
}

hx::ObjectPtr< FlxMouse_obj > FlxMouse_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_legacy::display::Sprite CursorContainer) {
	FlxMouse_obj *__this = (FlxMouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxMouse_obj), true, "flixel.input.mouse.FlxMouse"));
	*(void **)__this = FlxMouse_obj::_hx_vtable;
	__this->__construct(CursorContainer);
	return __this;
}

FlxMouse_obj::FlxMouse_obj()
{
}

void FlxMouse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxMouse);
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(wheel,"wheel");
	HX_MARK_MEMBER_NAME(cursorContainer,"cursorContainer");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(useSystemCursor,"useSystemCursor");
	HX_MARK_MEMBER_NAME(_leftButton,"_leftButton");
	HX_MARK_MEMBER_NAME(_middleButton,"_middleButton");
	HX_MARK_MEMBER_NAME(_rightButton,"_rightButton");
	HX_MARK_MEMBER_NAME(_cursor,"_cursor");
	HX_MARK_MEMBER_NAME(_cursorBitmapData,"_cursorBitmapData");
	HX_MARK_MEMBER_NAME(_wheelUsed,"_wheelUsed");
	HX_MARK_MEMBER_NAME(_visibleWhenFocusLost,"_visibleWhenFocusLost");
	HX_MARK_MEMBER_NAME(_lastX,"_lastX");
	HX_MARK_MEMBER_NAME(_lastY,"_lastY");
	HX_MARK_MEMBER_NAME(_lastWheel,"_lastWheel");
	HX_MARK_MEMBER_NAME(_lastLeftButtonState,"_lastLeftButtonState");
	HX_MARK_MEMBER_NAME(_stage,"_stage");
	HX_MARK_END_CLASS();
}

void FlxMouse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(wheel,"wheel");
	HX_VISIT_MEMBER_NAME(cursorContainer,"cursorContainer");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(useSystemCursor,"useSystemCursor");
	HX_VISIT_MEMBER_NAME(_leftButton,"_leftButton");
	HX_VISIT_MEMBER_NAME(_middleButton,"_middleButton");
	HX_VISIT_MEMBER_NAME(_rightButton,"_rightButton");
	HX_VISIT_MEMBER_NAME(_cursor,"_cursor");
	HX_VISIT_MEMBER_NAME(_cursorBitmapData,"_cursorBitmapData");
	HX_VISIT_MEMBER_NAME(_wheelUsed,"_wheelUsed");
	HX_VISIT_MEMBER_NAME(_visibleWhenFocusLost,"_visibleWhenFocusLost");
	HX_VISIT_MEMBER_NAME(_lastX,"_lastX");
	HX_VISIT_MEMBER_NAME(_lastY,"_lastY");
	HX_VISIT_MEMBER_NAME(_lastWheel,"_lastWheel");
	HX_VISIT_MEMBER_NAME(_lastLeftButtonState,"_lastLeftButtonState");
	HX_VISIT_MEMBER_NAME(_stage,"_stage");
}

hx::Val FlxMouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"wheel") ) { return hx::Val( wheel ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_lastX") ) { return hx::Val( _lastX ); }
		if (HX_FIELD_EQ(inName,"_lastY") ) { return hx::Val( _lastY ); }
		if (HX_FIELD_EQ(inName,"_stage") ) { return hx::Val( _stage ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"record") ) { return hx::Val( record_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"pressed") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pressed() ); }
		if (HX_FIELD_EQ(inName,"_cursor") ) { return hx::Val( _cursor ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"playback") ) { return hx::Val( playback_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_wheelUsed") ) { return hx::Val( _wheelUsed ); }
		if (HX_FIELD_EQ(inName,"_lastWheel") ) { return hx::Val( _lastWheel ); }
		if (HX_FIELD_EQ(inName,"showCursor") ) { return hx::Val( showCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideCursor") ) { return hx::Val( hideCursor_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"justPressed") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justPressed() ); }
		if (HX_FIELD_EQ(inName,"_leftButton") ) { return hx::Val( _leftButton ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"onGameStart") ) { return hx::Val( onGameStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pressed") ) { return hx::Val( get_pressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"justReleased") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justReleased() ); }
		if (HX_FIELD_EQ(inName,"pressedRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pressedRight() ); }
		if (HX_FIELD_EQ(inName,"_rightButton") ) { return hx::Val( _rightButton ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return hx::Val( onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseLeave") ) { return hx::Val( onMouseLeave_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pressedMiddle") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pressedMiddle() ); }
		if (HX_FIELD_EQ(inName,"_middleButton") ) { return hx::Val( _middleButton ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cursorContainer") ) { return hx::Val( cursorContainer ); }
		if (HX_FIELD_EQ(inName,"useSystemCursor") ) { return hx::Val( useSystemCursor ); }
		if (HX_FIELD_EQ(inName,"get_justPressed") ) { return hx::Val( get_justPressed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"justPressedRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justPressedRight() ); }
		if (HX_FIELD_EQ(inName,"get_justReleased") ) { return hx::Val( get_justReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_pressedRight") ) { return hx::Val( get_pressedRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"showSystemCursor") ) { return hx::Val( showSystemCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideSystemCursor") ) { return hx::Val( hideSystemCursor_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"justReleasedRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justReleasedRight() ); }
		if (HX_FIELD_EQ(inName,"justPressedMiddle") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justPressedMiddle() ); }
		if (HX_FIELD_EQ(inName,"_cursorBitmapData") ) { return hx::Val( _cursorBitmapData ); }
		if (HX_FIELD_EQ(inName,"get_pressedMiddle") ) { return hx::Val( get_pressedMiddle_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"justReleasedMiddle") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_justReleasedMiddle() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"set_useSystemCursor") ) { return hx::Val( set_useSystemCursor_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_lastLeftButtonState") ) { return hx::Val( _lastLeftButtonState ); }
		if (HX_FIELD_EQ(inName,"get_justPressedRight") ) { return hx::Val( get_justPressedRight_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_visibleWhenFocusLost") ) { return hx::Val( _visibleWhenFocusLost ); }
		if (HX_FIELD_EQ(inName,"get_justReleasedRight") ) { return hx::Val( get_justReleasedRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_justPressedMiddle") ) { return hx::Val( get_justPressedMiddle_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_justReleasedMiddle") ) { return hx::Val( get_justReleasedMiddle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxMouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"wheel") ) { wheel=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_lastX") ) { _lastX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastY") ) { _lastY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stage") ) { _stage=inValue.Cast<  ::openfl::_legacy::display::Stage >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue.Cast< bool >()) );visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cursor") ) { _cursor=inValue.Cast<  ::openfl::_legacy::display::Bitmap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_wheelUsed") ) { _wheelUsed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastWheel") ) { _lastWheel=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_leftButton") ) { _leftButton=inValue.Cast<  ::flixel::input::mouse::FlxMouseButton >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_rightButton") ) { _rightButton=inValue.Cast<  ::flixel::input::mouse::FlxMouseButton >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_middleButton") ) { _middleButton=inValue.Cast<  ::flixel::input::mouse::FlxMouseButton >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cursorContainer") ) { cursorContainer=inValue.Cast<  ::openfl::_legacy::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useSystemCursor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useSystemCursor(inValue.Cast< bool >()) );useSystemCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_cursorBitmapData") ) { _cursorBitmapData=inValue.Cast<  ::openfl::_legacy::display::BitmapData >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_lastLeftButtonState") ) { _lastLeftButtonState=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_visibleWhenFocusLost") ) { _visibleWhenFocusLost=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxMouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9"));
	outFields->push(HX_HCSTRING("cursorContainer","\x8b","\x3b","\x1c","\x12"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("useSystemCursor","\x0c","\x3e","\xde","\xf9"));
	outFields->push(HX_HCSTRING("pressed","\xa2","\xd2","\xe6","\x39"));
	outFields->push(HX_HCSTRING("justPressed","\xd6","\x0d","\xa7","\xf2"));
	outFields->push(HX_HCSTRING("justReleased","\x09","\x1b","\x5b","\x66"));
	outFields->push(HX_HCSTRING("pressedRight","\xda","\xdd","\x81","\x58"));
	outFields->push(HX_HCSTRING("justPressedRight","\x26","\x86","\x9a","\xc0"));
	outFields->push(HX_HCSTRING("justReleasedRight","\x13","\xc0","\x4a","\x68"));
	outFields->push(HX_HCSTRING("pressedMiddle","\x97","\xbf","\x58","\x17"));
	outFields->push(HX_HCSTRING("justPressedMiddle","\xcb","\x59","\xd3","\xc4"));
	outFields->push(HX_HCSTRING("justReleasedMiddle","\x3e","\xcf","\x55","\xd7"));
	outFields->push(HX_HCSTRING("_leftButton","\x78","\xea","\x7a","\xdb"));
	outFields->push(HX_HCSTRING("_middleButton","\x06","\xea","\x42","\xd7"));
	outFields->push(HX_HCSTRING("_rightButton","\xef","\xdc","\x6e","\xa9"));
	outFields->push(HX_HCSTRING("_cursor","\x75","\xa0","\x5f","\xad"));
	outFields->push(HX_HCSTRING("_cursorBitmapData","\x8e","\x5e","\x40","\xcd"));
	outFields->push(HX_HCSTRING("_wheelUsed","\x39","\x58","\x29","\xd8"));
	outFields->push(HX_HCSTRING("_visibleWhenFocusLost","\xcf","\x95","\x3f","\x38"));
	outFields->push(HX_HCSTRING("_lastX","\x83","\x48","\xa3","\x6b"));
	outFields->push(HX_HCSTRING("_lastY","\x84","\x48","\xa3","\x6b"));
	outFields->push(HX_HCSTRING("_lastWheel","\x26","\xde","\x09","\x72"));
	outFields->push(HX_HCSTRING("_lastLeftButtonState","\x43","\xeb","\x82","\x82"));
	outFields->push(HX_HCSTRING("_stage","\xff","\xb1","\xf2","\x7f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxMouse_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxMouse_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsInt,(int)offsetof(FlxMouse_obj,wheel),HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9")},
	{hx::fsObject /*::openfl::_legacy::display::Sprite*/ ,(int)offsetof(FlxMouse_obj,cursorContainer),HX_HCSTRING("cursorContainer","\x8b","\x3b","\x1c","\x12")},
	{hx::fsBool,(int)offsetof(FlxMouse_obj,visible),HX_HCSTRING("visible","\x72","\x78","\x24","\xa3")},
	{hx::fsBool,(int)offsetof(FlxMouse_obj,useSystemCursor),HX_HCSTRING("useSystemCursor","\x0c","\x3e","\xde","\xf9")},
	{hx::fsObject /*::flixel::input::mouse::FlxMouseButton*/ ,(int)offsetof(FlxMouse_obj,_leftButton),HX_HCSTRING("_leftButton","\x78","\xea","\x7a","\xdb")},
	{hx::fsObject /*::flixel::input::mouse::FlxMouseButton*/ ,(int)offsetof(FlxMouse_obj,_middleButton),HX_HCSTRING("_middleButton","\x06","\xea","\x42","\xd7")},
	{hx::fsObject /*::flixel::input::mouse::FlxMouseButton*/ ,(int)offsetof(FlxMouse_obj,_rightButton),HX_HCSTRING("_rightButton","\xef","\xdc","\x6e","\xa9")},
	{hx::fsObject /*::openfl::_legacy::display::Bitmap*/ ,(int)offsetof(FlxMouse_obj,_cursor),HX_HCSTRING("_cursor","\x75","\xa0","\x5f","\xad")},
	{hx::fsObject /*::openfl::_legacy::display::BitmapData*/ ,(int)offsetof(FlxMouse_obj,_cursorBitmapData),HX_HCSTRING("_cursorBitmapData","\x8e","\x5e","\x40","\xcd")},
	{hx::fsBool,(int)offsetof(FlxMouse_obj,_wheelUsed),HX_HCSTRING("_wheelUsed","\x39","\x58","\x29","\xd8")},
	{hx::fsBool,(int)offsetof(FlxMouse_obj,_visibleWhenFocusLost),HX_HCSTRING("_visibleWhenFocusLost","\xcf","\x95","\x3f","\x38")},
	{hx::fsInt,(int)offsetof(FlxMouse_obj,_lastX),HX_HCSTRING("_lastX","\x83","\x48","\xa3","\x6b")},
	{hx::fsInt,(int)offsetof(FlxMouse_obj,_lastY),HX_HCSTRING("_lastY","\x84","\x48","\xa3","\x6b")},
	{hx::fsInt,(int)offsetof(FlxMouse_obj,_lastWheel),HX_HCSTRING("_lastWheel","\x26","\xde","\x09","\x72")},
	{hx::fsInt,(int)offsetof(FlxMouse_obj,_lastLeftButtonState),HX_HCSTRING("_lastLeftButtonState","\x43","\xeb","\x82","\x82")},
	{hx::fsObject /*::openfl::_legacy::display::Stage*/ ,(int)offsetof(FlxMouse_obj,_stage),HX_HCSTRING("_stage","\xff","\xb1","\xf2","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxMouse_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxMouse_obj_sMemberFields[] = {
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("wheel","\x9b","\x34","\xba","\xc9"),
	HX_HCSTRING("cursorContainer","\x8b","\x3b","\x1c","\x12"),
	HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"),
	HX_HCSTRING("useSystemCursor","\x0c","\x3e","\xde","\xf9"),
	HX_HCSTRING("_leftButton","\x78","\xea","\x7a","\xdb"),
	HX_HCSTRING("_middleButton","\x06","\xea","\x42","\xd7"),
	HX_HCSTRING("_rightButton","\xef","\xdc","\x6e","\xa9"),
	HX_HCSTRING("_cursor","\x75","\xa0","\x5f","\xad"),
	HX_HCSTRING("_cursorBitmapData","\x8e","\x5e","\x40","\xcd"),
	HX_HCSTRING("_wheelUsed","\x39","\x58","\x29","\xd8"),
	HX_HCSTRING("_visibleWhenFocusLost","\xcf","\x95","\x3f","\x38"),
	HX_HCSTRING("_lastX","\x83","\x48","\xa3","\x6b"),
	HX_HCSTRING("_lastY","\x84","\x48","\xa3","\x6b"),
	HX_HCSTRING("_lastWheel","\x26","\xde","\x09","\x72"),
	HX_HCSTRING("_lastLeftButtonState","\x43","\xeb","\x82","\x82"),
	HX_HCSTRING("_stage","\xff","\xb1","\xf2","\x7f"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("onGameStart","\xf1","\x45","\x69","\xdb"),
	HX_HCSTRING("onMouseWheel","\x35","\xca","\xca","\xbf"),
	HX_HCSTRING("onMouseLeave","\x91","\xca","\x63","\x68"),
	HX_HCSTRING("get_pressed","\xb9","\x32","\xe1","\xbf"),
	HX_HCSTRING("get_justPressed","\x6d","\xc5","\x88","\xb3"),
	HX_HCSTRING("get_justReleased","\x92","\x07","\xfa","\x6a"),
	HX_HCSTRING("get_pressedRight","\x63","\xca","\x20","\x5d"),
	HX_HCSTRING("get_justPressedRight","\x2f","\xeb","\x04","\xdf"),
	HX_HCSTRING("get_justReleasedRight","\xea","\xc2","\xf8","\xe6"),
	HX_HCSTRING("get_pressedMiddle","\xee","\xca","\xc8","\x1d"),
	HX_HCSTRING("get_justPressedMiddle","\xa2","\x5c","\x81","\x43"),
	HX_HCSTRING("get_justReleasedMiddle","\x87","\x48","\xea","\x30"),
	HX_HCSTRING("showSystemCursor","\xc2","\x1f","\x8d","\xc0"),
	HX_HCSTRING("hideSystemCursor","\x07","\x93","\x7b","\x81"),
	HX_HCSTRING("set_useSystemCursor","\x2f","\x00","\x86","\xc1"),
	HX_HCSTRING("showCursor","\xb3","\x33","\x5d","\xa8"),
	HX_HCSTRING("hideCursor","\x38","\x35","\x6e","\xd6"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("record","\x91","\x76","\xec","\xfd"),
	HX_HCSTRING("playback","\x1b","\x12","\x4b","\x46"),
	::String(null()) };

static void FlxMouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxMouse_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxMouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxMouse_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxMouse_obj::__mClass;

void FlxMouse_obj::__register()
{
	hx::Object *dummy = new FlxMouse_obj;
	FlxMouse_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.input.mouse.FlxMouse","\x12","\x2b","\x6e","\x8c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxMouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxMouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxMouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxMouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace input
} // end namespace mouse
